#include "../imports/stdlib.fc";

const UTONIC_MANAGER::EVENT::CODE_BASE = 0x30000;

const UTONIC_MANAGER::EVENT::REGISTER = UTONIC_MANAGER::EVENT::CODE_BASE + 1;
const UTONIC_MANAGER::EVENT::SWITCH = UTONIC_MANAGER::EVENT::CODE_BASE + 2;

() emit_operator_register_log(slice operator_address, slice operator_register_address, int timestamp) impure {

    var msg_body = begin_cell()
        .store_uint(UTONIC_MANAGER::EVENT::REGISTER, 32)
        .store_slice(operator_address)
        .store_slice(operator_register_address)
        .store_uint(timestamp, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint (12, 4)             ;; ext_out_msg_info$11 addr$00
        .store_uint (0, 2)              ;; dest addr$00
        .store_uint(1, 64 + 32 + 1 + 1) ;; lt, at, init, body
        .store_ref(msg_body)
        .end_cell();
    
    send_raw_message(msg, 0);

}


() emit_operator_switch_log(slice operator_address, slice operator_register_address, int is_baned, int timestamp) impure {

    var msg_body = begin_cell()
        .store_uint(UTONIC_MANAGER::EVENT::SWITCH, 32)
        .store_slice(operator_address)
        .store_slice(operator_register_address)
        .store_uint(is_baned, 1)
        .store_uint(timestamp, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint (12, 4)             ;; ext_out_msg_info$11 addr$00
        .store_uint (0, 2)              ;; dest addr$00
        .store_uint(1, 64 + 32 + 1 + 1) ;; lt, at, init, body
        .store_ref(msg_body)
        .end_cell();
    
    send_raw_message(msg, 0);

}
