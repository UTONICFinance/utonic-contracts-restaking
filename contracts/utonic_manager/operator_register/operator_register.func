#include "../../imports/stdlib.fc";

#include "../../stake_utils.func";

#include "../../stake_op.func";
#include "../../stake_errors.func";

#include "../utonic_manager_op.func";

#include "operator_register_params.func";
#include "operator_register_storage.func";
#include "operator_register_events.func";

global int status;
global slice operator_address;
global slice utonic_manager_address;

() load_global_data() impure inline {
    (
        status,
        operator_address,
        utonic_manager_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        status,
        operator_address,
        utonic_manager_address
    );
}

() init (int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    ;; storage_fee will include deploy_fee (if exists)
    int storage_fee = OPERATOR_REGISTER::MIN_TON_STORAGE - min(ton_balance_before_msg, OPERATOR_REGISTER::MIN_TON_STORAGE);

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value >= storage_fee
            + OPERATOR_REGISTER::INIT_FEE
            + fwd_fee ;; for event
    );

    load_global_data();
    ;; prevent attack from operator's re-registering
    throw_unless(STAKE::ERR::INVALID_STATUS, status == OPERATOR_REGISTER::STATUS_NOT_INITED);
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(
            sender_address,
            utonic_manager_address
        )
    );

    status = OPERATOR_REGISTER::STATUS_NORMAL;
    save_global_data();
    emit_operator_register_success_log(operator_address,my_address(),now());
    
    slice response_address = in_msg_body~load_msg_addr();

    int remain_msg_value = msg_value
        - storage_fee
        - OPERATOR_REGISTER::INIT_FEE
        - fwd_fee;
    refund_fee(query_id,response_address,remain_msg_value);
}

() switch_operator_status(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    ;; storage_fee will include deploy_fee (if exists)
    int storage_fee = OPERATOR_REGISTER::MIN_TON_STORAGE - min(ton_balance_before_msg, OPERATOR_REGISTER::MIN_TON_STORAGE);

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value >= storage_fee
            + OPERATOR_REGISTER::SWITCH_FEE
    );

    load_global_data();
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(
            sender_address,
            utonic_manager_address
        )
    );
    int is_baned = in_msg_body~load_uint(1);
    slice response_address = in_msg_body~load_msg_addr();
    if (is_baned) {
        status = OPERATOR_REGISTER::STATUS_BANED;
    } else {
        status = OPERATOR_REGISTER::STATUS_NORMAL;
    }
    save_global_data();
    int remain_msg_value = msg_value
        - storage_fee
        - OPERATOR_REGISTER::SWITCH_FEE;

    refund_fee(query_id,response_address,remain_msg_value);

}

() query (int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = OPERATOR_REGISTER::MIN_TON_STORAGE - min(ton_balance_before_msg, OPERATOR_REGISTER::MIN_TON_STORAGE);

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value >= storage_fee
            + OPERATOR_REGISTER::QUERY_FEE
    );

    load_global_data();
    ;; throw_unless(STAKE::ERR::WRONG_CALLER, sender_address == utonic_manager_address);
    ;; throw_unless(STAKE::ERR::INVALID_STATUS, inited);

    int remain_msg_value = msg_value 
        - storage_fee 
        - OPERATOR_REGISTER::QUERY_FEE;
    
    cell extra_payload = in_msg_body~load_ref();

    var msg_body = begin_cell()
        .store_uint(STAKE::OP::QUERY_ACK, 32)
        .store_uint(query_id, 64)
        .store_uint(status, 2)
        .store_slice(operator_address)
        .store_ref(extra_payload)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        ;; todo determine msg value for burn notification
        .store_coins(remain_msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 0);

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    if (op == STAKE::OP::INIT) { 
        init(query_id, in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == UTONIC_MANAGER::OP::SWITCH_OPERATOR_STATUS) { 
        switch_operator_status(query_id, in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::QUERY) { 
        query(query_id, in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    throw(0xffff);
}

(int, slice, slice) get_operator_register_data() method_id {
    load_global_data();
    return (
        status,
        operator_address,
        utonic_manager_address
    );
}
