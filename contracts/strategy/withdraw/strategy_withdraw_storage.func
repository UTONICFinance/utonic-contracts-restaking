#include "strategy_withdraw_utils.func";

(int, int, int, int, int, slice, slice) load_data() inline {
    
    slice ds = get_data().begin_parse();

    slice data_cell = ds~load_ref().begin_parse();
    int lc_shares = data_cell~load_coins();
    int lc_withdraw_id = data_cell~load_uint(64);
    int lc_burn_timestamp = data_cell~load_uint(64);
    int lc_earliest_withdraw_timestamp = data_cell~load_uint(64);
    int lc_finished = data_cell~load_uint(1);  

    slice address_cell = ds~load_ref().begin_parse();
    slice lc_owner_address = address_cell~load_msg_addr();
    slice lc_strategy_address = address_cell~load_msg_addr();
    
    return (
        lc_shares,
        lc_withdraw_id,
        lc_burn_timestamp,
        lc_earliest_withdraw_timestamp,
        lc_finished,
        lc_owner_address,
        lc_strategy_address
    );
}

() save_data (
    int lc_shares,
    int lc_withdraw_id,
    int lc_burn_timestamp,
    int lc_earliest_withdraw_timestamp,
    int lc_finished,
    slice lc_owner_address,
    slice lc_strategy_address
) impure inline {
    set_data(pack_strategy_withdraw_data(
        lc_shares,
        lc_withdraw_id,
        lc_burn_timestamp,
        lc_earliest_withdraw_timestamp,
        lc_finished,
        lc_owner_address,
        lc_strategy_address
    ));
}
