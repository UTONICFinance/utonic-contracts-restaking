
#include "../../standard/standard_op.func";
#include "../../stake_utils.func";
#include "../../stake_errors.func";
#include "../../stake_op.func";

#include "../strategy_params.func";

#include "strategy_withdraw_errors.func";
#include "strategy_withdraw_params.func";
#include "strategy_withdraw_storage.func";

global int shares;
global int withdraw_id;
global int burn_timestamp;
global int earliest_withdraw_timestamp;
global int finished;
global slice owner_address;
global slice strategy_address;


() load_global_data() impure inline {
    (
        shares,
        withdraw_id,
        burn_timestamp,
        earliest_withdraw_timestamp,
        finished,
        owner_address,
        strategy_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        shares,
        withdraw_id,
        burn_timestamp,
        earliest_withdraw_timestamp,
        finished,
        owner_address,
        strategy_address
    );
}

() init_withdraw_data(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = WITHDRAW::MIN_TON_STORAGE - min(ton_balance_before_msg, WITHDRAW::MIN_TON_STORAGE);
    
    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > storage_fee
            + WITHDRAW::INIT_FEE
    );

    load_global_data();
    throw_unless(STAKE::ERR::WRONG_CALLER, equal_slices(strategy_address, sender_address));

    shares = in_msg_body~load_coins();
    burn_timestamp = in_msg_body~load_uint(64);
    earliest_withdraw_timestamp = in_msg_body~load_uint(64);
    finished = 0;
    save_global_data();

    slice address_slice = in_msg_body~load_ref().begin_parse();
    slice response_address = address_slice~load_msg_addr();

    int remain_msg_value = msg_value
        - storage_fee
        - WITHDRAW::INIT_FEE;
    
    refund_fee(query_id, response_address, remain_msg_value);
}

() withdraw (int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    load_global_data();

    throw_unless(WITHDRAW::ERR::TIME_NOT_EXPIRED, now() >= earliest_withdraw_timestamp);
    throw_unless(WITHDRAW::ERR::FINISHED, finished == 0);
    throw_unless(STAKE::ERR::WRONG_CALLER, equal_slices(owner_address, sender_address));

    slice recipient_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();

    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = WITHDRAW::MIN_TON_STORAGE - min(ton_balance_before_msg, WITHDRAW::MIN_TON_STORAGE);

    int strategy_withdraw_fee = max(withdraw_ton_fee(fwd_fee), withdraw_jetton_fee(fwd_fee));

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > storage_fee
            + WITHDRAW::WITHDRAW_FEE
            + fwd_fee
            + strategy_withdraw_fee
    );
    finished = 1;
    save_global_data();
    int remain_msg_value = msg_value
        - storage_fee
        - WITHDRAW::WITHDRAW_FEE
        - fwd_fee;

    var address_cell = begin_cell()
        .store_slice(recipient_address)
        .store_slice(response_address)
        .end_cell();

    var msg_body = begin_cell()
        .store_uint(STAKE::OP::WITHDRAW, 32)
        .store_uint(query_id, 64)
        .store_coins(shares)
        .store_uint(withdraw_id, 64)
        .store_slice(owner_address)
        .store_ref(address_cell)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(strategy_address)
        .store_coins(remain_msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);
}

() on_bounce(slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    load_global_data();
    
    int op = in_msg_body~load_uint(32);
    throw_unless(STAKE::ERR::BOUNCE_INVALID_OP, op == STAKE::OP::WITHDRAW);
    finished = 0;
    save_global_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == STAKE::OP::INIT) {
        init_withdraw_data(query_id, in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == STAKE::OP::WITHDRAW) {
        withdraw(query_id, in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    throw(0xffff);
}

(int, int, int, int, int, slice, slice) get_strategy_withdraw_data() method_id {
    
    load_global_data();
    return (
        shares,
        withdraw_id,
        burn_timestamp,
        earliest_withdraw_timestamp,
        finished,
        owner_address,
        strategy_address
    );
}
