#include "../../imports/stdlib.fc";

#include "../../stake_utils.func";

#include "../strategy_params.func";

#include "../../stake_op.func";
#include "../../stake_errors.func";


#include "user_strategy_info_status.func";
#include "user_strategy_info_params.func";
#include "user_strategy_info_storage.func";

global int shares;
global int status;
global int withdraw_cnt;
global slice user_address;
global slice strategy_address;
global slice operator_address;

() load_global_data() impure inline {
    (
        shares, 
        status, 
        withdraw_cnt,
        user_address, 
        strategy_address, 
        operator_address
    ) = load_data();
}

() save_global_data() impure inline {
    save_data(
        shares, 
        status, 
        withdraw_cnt,
        user_address, 
        strategy_address, 
        operator_address
    );
}


() fwd_delegate_or_undelegate (int opcode, int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = USER_STRATEGY_INFO::MIN_TON_STORAGE - min(ton_balance_before_msg, USER_STRATEGY_INFO::MIN_TON_STORAGE);

    int fwd_value = 0;
    if (opcode == STAKE::OP::DELEGATE) {
        fwd_value = delegate_cycle_fee(fwd_fee);
    } else {
        fwd_value = undelegate_cycle_fee(fwd_fee);
    }

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > storage_fee
            + USER_STRATEGY_INFO::DELEGATE_OR_UNDELEGATE_FEE
            + fwd_fee
            + fwd_value
            + fwd_fee
            + USER_STRATEGY_INFO::DELEGATE_OR_UNDELEGATE_ACK_FEE
    );

    load_global_data();
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(sender_address, user_address)
    );
    int origin_status = status;
    if (opcode == STAKE::OP::DELEGATE) {
        throw_unless(
            STAKE::ERR::INVALID_STATUS, 
            origin_status == USER_STRATEGY_INFO::STATUS::NO_DELEGATE
        );
        status = USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_DELEGATE;
    } else {
        throw_unless(
            STAKE::ERR::INVALID_STATUS, 
            origin_status == USER_STRATEGY_INFO::STATUS::DELEGATE_DONE
        );
        status = USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_UNDELEGATE;
    }

    if (opcode == STAKE::OP::DELEGATE) {
        operator_address = in_msg_body~load_msg_addr();
    }
    slice response_address = in_msg_body~load_msg_addr();

    save_global_data();

    int remain_msg_value = msg_value
        - storage_fee
        - USER_STRATEGY_INFO::DELEGATE_OR_UNDELEGATE_FEE
        - fwd_fee;

    var msg_body = begin_cell()
        .store_uint(opcode, 32)
        .store_uint(query_id, 64)
        .store_coins(shares)
        .store_slice(user_address)
        .store_ref(
            begin_cell()
                .store_slice(operator_address)
                .store_slice(response_address)
            .end_cell()
        )
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(strategy_address)
        ;; todo determine msg value for burn notification
        .store_coins(remain_msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);

}

() cancel_pending (int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = USER_STRATEGY_INFO::MIN_TON_STORAGE - min(ton_balance_before_msg, USER_STRATEGY_INFO::MIN_TON_STORAGE);

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > storage_fee
            + USER_STRATEGY_INFO::CANCEL_PENDING_FEE
    );

    load_global_data();
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(sender_address, strategy_address)
    );
    
    throw_unless(
        STAKE::ERR::INVALID_STATUS, 
        (status == USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_DELEGATE)
        | (status == USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_UNDELEGATE)
    );
    if (status == USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_DELEGATE) {
        status = USER_STRATEGY_INFO::STATUS::NO_DELEGATE;
    } else {
        status = USER_STRATEGY_INFO::STATUS::DELEGATE_DONE;
    }
    save_global_data();

    slice response_address = in_msg_body~load_msg_addr();
    
    int remain_msg_value = msg_value 
        - storage_fee 
        - USER_STRATEGY_INFO::CANCEL_PENDING_FEE;
    refund_fee(query_id, response_address, remain_msg_value);
}

() delegate_or_undelegate_ack (int opcode, int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = USER_STRATEGY_INFO::MIN_TON_STORAGE - min(ton_balance_before_msg, USER_STRATEGY_INFO::MIN_TON_STORAGE);

    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > storage_fee
            + USER_STRATEGY_INFO::CANCEL_PENDING_FEE
    );

    load_global_data();
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(sender_address, strategy_address)
    );
    if (opcode == STAKE::OP::DELEGATE_ACK) {
        throw_unless(STAKE::ERR::INVALID_STATUS, status == USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_DELEGATE);
        status = USER_STRATEGY_INFO::STATUS::DELEGATE_DONE;
    } else {
        throw_unless(STAKE::ERR::INVALID_STATUS, status == USER_STRATEGY_INFO::STATUS::PENDING_UPDATE_UNDELEGATE);
        status = USER_STRATEGY_INFO::STATUS::NO_DELEGATE;
    }
    save_global_data();

    slice response_address = in_msg_body~load_msg_addr();

    int remain_msg_value = msg_value 
        - storage_fee 
        - USER_STRATEGY_INFO::DELEGATE_OR_UNDELEGATE_ACK_FEE;
    refund_fee(query_id, response_address, remain_msg_value);
}

() deposit(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int deposit_ack_fee = deposit_ack_route_fee(fwd_fee);
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = USER_STRATEGY_INFO::MIN_TON_STORAGE - min(ton_balance_before_msg, USER_STRATEGY_INFO::MIN_TON_STORAGE);

    ;; ensure that msg_value is enough
    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > USER_STRATEGY_INFO::DEPOSIT_DELEGATE_DONE_FEE
            + storage_fee
            + fwd_fee
            + deposit_ack_fee
    );

    load_global_data();
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(sender_address, strategy_address)
    );
    throw_unless(
        STAKE::ERR::INVALID_STATUS, 
        (status == USER_STRATEGY_INFO::STATUS::NO_DELEGATE)
        | (status == USER_STRATEGY_INFO::STATUS::DELEGATE_DONE)
    );
    
    int deposit_shares = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    
    shares += deposit_shares;
    save_global_data();
    if (status == USER_STRATEGY_INFO::STATUS::DELEGATE_DONE) {
        
        int remain_msg_value = msg_value
            - USER_STRATEGY_INFO::DEPOSIT_DELEGATE_DONE_FEE
            - storage_fee
            - fwd_fee;
        var deposit_ack_msg_body = begin_cell()
            .store_uint(STAKE::OP::DEPOSIT_ACK, 32)
            .store_uint(query_id, 64)
            .store_coins(deposit_shares)
            .store_slice(user_address)
            .store_ref(
                begin_cell()
                    .store_slice(operator_address)
                    .store_slice(response_address)
                .end_cell()
            )
            .end_cell();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(strategy_address)
            ;; todo determine msg value for burn notification
            .store_coins(remain_msg_value)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(deposit_ack_msg_body);
        send_raw_message(msg.end_cell(), 1);

    } else {
        int remain_msg_value = msg_value
            - USER_STRATEGY_INFO::DEPOSIT_NO_DELEGATE_FEE
            - storage_fee;
        refund_fee(query_id, response_address, remain_msg_value);
    }
}


() init(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    ;; modify nothing
    ;; just init a contract and deposit some necessary ton
    ;; and refund excess ton
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = USER_STRATEGY_INFO::MIN_TON_STORAGE - min(ton_balance_before_msg, USER_STRATEGY_INFO::MIN_TON_STORAGE);
    ;; ensure that msg_value is enough
    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > USER_STRATEGY_INFO::INIT_FEE
            + storage_fee
    );
    int remain_msg_value = msg_value
        - USER_STRATEGY_INFO::INIT_FEE
        - storage_fee;
    slice response_address = in_msg_body~load_msg_addr();
    refund_fee(query_id, response_address, remain_msg_value);
}


() burn(int query_id, slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = USER_STRATEGY_INFO::MIN_TON_STORAGE - min(ton_balance_before_msg, USER_STRATEGY_INFO::MIN_TON_STORAGE);
    throw_unless(
        STAKE::ERR::INSUFFICIENT_VALUE, 
        msg_value > USER_STRATEGY_INFO::BURN_FEE
            + storage_fee
            + fwd_fee
            + burn_route_fee(fwd_fee)
    );
    
    load_global_data();
    throw_unless(
        STAKE::ERR::WRONG_CALLER, 
        equal_slices(sender_address, user_address)
    );
    throw_unless(STAKE::ERR::INVALID_STATUS, status == USER_STRATEGY_INFO::STATUS::NO_DELEGATE);
    
    int burn_shares = in_msg_body~load_coins();
    throw_unless(STAKE::ERR::INSUFFICIENT_SHARES, shares >= burn_shares);

    slice response_address = in_msg_body~load_msg_addr();
    shares -= burn_shares;
    withdraw_cnt += 1;
    save_global_data();

    int remain_msg_value = msg_value 
        - storage_fee 
        - USER_STRATEGY_INFO::BURN_FEE
        - fwd_fee;

    var msg_body = begin_cell()
        .store_uint(STAKE::OP::BURN, 32)
        .store_uint(query_id, 64)
        .store_coins(burn_shares)
        .store_uint(withdraw_cnt, 64)
        .store_ref(
            begin_cell()
                .store_slice(user_address)
                .store_slice(response_address)
            .end_cell()
        )
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(strategy_address)
        ;; todo determine msg value for burn notification
        .store_coins(remain_msg_value)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);

}


() on_bounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    load_global_data();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == STAKE::OP::BURN) {
        int burn_shares = in_msg_body~load_coins();
        shares += burn_shares;
    } elseif (op == STAKE::OP::DELEGATE) {
        status = USER_STRATEGY_INFO::STATUS::NO_DELEGATE;
    } elseif (op == STAKE::OP::UNDELEGATE) {
        status = USER_STRATEGY_INFO::STATUS::DELEGATE_DONE;
    } else {
        throw(STAKE::ERR::BOUNCE_INVALID_OP);
    }
    save_global_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == STAKE::OP::INIT) {
        init(query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::DELEGATE) { 
        fwd_delegate_or_undelegate(op,query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::UNDELEGATE) { 
        fwd_delegate_or_undelegate(op,query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::CANCEL_PENDING) { 
        cancel_pending(query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::DELEGATE_ACK) { 
        delegate_or_undelegate_ack(op,query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::UNDELEGATE_ACK) { 
        delegate_or_undelegate_ack(op,query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::DEPOSIT) { 
        deposit(query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    if (op == STAKE::OP::BURN) { 
        burn(query_id,in_msg_body,sender_address,my_balance,fwd_fee,msg_value);
        return ();
    }

    throw(0xffff);
}

(int, int, int, slice, slice, slice) get_user_strategy_info_data() method_id {
    load_global_data();
    return (
        shares, 
        status,
        withdraw_cnt,
        user_address, 
        strategy_address, 
        operator_address
    );
}
